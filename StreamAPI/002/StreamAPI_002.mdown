# StreamAPI 入門 その1
コレクションを便利に操作できる
StreamAPIについて簡単に説明をします。

例えば

* リストをループしながら要素の内容を出力
* リストを指定の条件でソート
* リストから特定の条件を満たす要素のみを抽出した別のリストを作る
* リスト内の各要素を指定の条件でグルーピングしたマップを作る
etc…

何を語るよりもとにかくサンプル

## サンプルで利用するNewsクラス
ニュース日付とニュースタイトルというフィールドを持つJavaBean
```java
public class News {
  /** ニュース日付 */
  private String newsDay;
  /** ニュースタイトル */
  private String newsTitle;
  /** コンストラクタ */
  public News(final String newsDay,final String newsTitle) {
    this.newsDay = newsDay;
    this.newsTitle = newsTitle;
  }

  public String getNewsDay() {
    return newsDay;
  }

  public String getNewsTitle() {
    return newsTitle;
  }

  public String toString() {
    return String.format("[ニュース]%s:%s", newsDay, newsTitle);
  }

  public int compareNewsDay(News news) {
    return Integer.parseInt(newsDay) - Integer.parseInt(news.newsDay);
  }
}
```

## サンプルで利用するListの生成
```java
    // ニュース一覧
    List<News> newsList = Arrays.asList(
        new News("20160529", "ニュース１"),
        new News("20160530", "ニュース２"),
        new News("20160601", "ニュース３"),
        new News("20160529", "ニュース４"),
        new News("20160530", "ニュース５"),
        new News("20160601", "ニュース６")
        );
```

## List内の各要素を出力
普通に書くとループになるような処理がこう書ける
```java
    // ニュース一覧をループ文を書かずに、forEachを利用して表示
    newsList.stream()
            .forEach(news -> System.out.println(news));
```

実行結果
```java
[ニュース]20160529:ニュース１
[ニュース]20160530:ニュース２
[ニュース]20160601:ニュース３
[ニュース]20160529:ニュース４
[ニュース]20160530:ニュース５
[ニュース]20160601:ニュース６
```

ラムダ式のトコはメソッド参照と呼ばれる書き方も出来る。
出力結果は同じ。
引数すら省略されているので、慣れないとラムダ式以上に大変かも
```java
    newsList.stream()
            .forEach(System.out::println);
```


## Listを指定の条件でソート
普通に書くとループになるような処理がこう書ける
```java
    // Comparator<T>は関数型インターフェース。
    // int compare(T t1, T t2)メソッドを実装する必要がある。
    // 引数1の方が大きい場合は正、引数2の方が大きい場合は負、等しい場合は0を返却
    Comparator<News> comparator = new Comparator<News>() {
      public int compare(News news1, News news2) {
        return Integer.parseInt(news1.getNewsDay()) - Integer.parseInt(news2.getNewsDay());
      }
    };

    newsList.stream()
            .sorted(comparator) // srotedメソッドの引数はComparator
            .forEach(System.out::println);
```

実行結果
```java
[ニュース]20160529:ニュース１
[ニュース]20160529:ニュース４
[ニュース]20160530:ニュース２
[ニュース]20160530:ニュース５
[ニュース]20160601:ニュース３
[ニュース]20160601:ニュース６
```

関数型インターフェース部分は互換性のあるラムダ式を書いてもＯＫ（というよりこっちの方が楽）
```java
    newsList.stream()
            .sorted((news1, news2) -> news1.compareNewsDay(news2))
            .forEach(System.out::println);
```

メソッド参照を利用した書き方だとこう。
引数１がターゲットで、引数２が引数になることに注意。
```java
    newsList.stream()
            .sorted(News::compareNewsDay)
            .forEach(System.out::println);
```

## Listから指定の条件を満たすものだけ抽出
普通に書くとループ、ＩＦ文を使って新しいリストにaddしていく様な処理がこう書ける。
```java
    newsList.stream()
            .filter(news -> "20160530".equals(news.getNewsDay()))
            .forEach(System.out::println);
```

実行結果
```java
[ニュース]20160530:ニュース２
[ニュース]20160530:ニュース５
```

## リスト内の各要素を指定の条件でグルーピングしたマップを作る
普通に書くとループ、ＩＦ文を使って新しいリストにaddしていく様な処理がこう書ける。
```java
    Map<String, List<News>> groupingNewsList = newsList.stream()
                           .collect(Collectors.groupingBy(news -> news.getNewsDay()));
    System.out.println(groupingNewsList);
```

実行結果
```java
{20160530=[[ニュース]20160530:ニュース２, [ニュース]20160530:ニュース５], 20160601=[[ニュース]20160601:ニュース３, [ニュース]20160601:ニュース６], 20160529=[[ニュース]20160529:ニュース１, [ニュース]20160529:ニュース４]}
```


## 次回
今回は本当にStreamAPIの触りしか触らなかったので、  
次回はその他の中間処理、末端処理を紹介します。
