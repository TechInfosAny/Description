# 正規表現 入門 その1
プログラミングの中やlogファイルの参照時などなど、  
あらゆるところにに出てくる正規表現の使い方を説明します。

##　正規表現とは
[Wiki](https://ja.wikipedia.org/wiki/%E6%AD%A3%E8%A6%8F%E8%A1%A8%E7%8F%BE)には色々と説明が記載されているが、正直よくわからないので、  
「ある文字列に対して、特定の文字パターンを指定して検索または置換をする方法」 
と思ってください。

例えば

* メールアドレスとして入力された文字がメールアドレスの体系として正しいかどうか判定
* ログファイルから特定の文字列に一致する情報だけを抜き出す
* HTMLファイル内のある文字を別の文字列に置換する

## 正規表現パターン
上記で"特定の文字パターンを指定して"と書いたが、  
正規表現では、この”特定の文字パターン”を  下記の正規表現パターンを組み合わせて表現します。

| パターン               | 意味              |
|:--------------------|:------------------|
| .                   | 任意の１文字          | 
| ?                   | １つ前の文字が0または1回発生        |
| *                   | １つ前の文字が0回以上発生          |
| +                   | １つ前の文字が1回以上発生         |
| {n}                 | １つ前の文字がn回発生            |
| {n,}                | １つ前の文字がn回以上発生         |
| {n,m}               | １つ前の文字がnからm回発生　　　    　|
| \d	              | 半角数字               |
| [0-9]               | 半角数字               |
| [a]                 | aに一致
| [abc]               | a,b,cのいずれか      |
| [^abc]              | a,b,c以外の文字    |
| [a-z]               | aからz              |
| [A-Z]               | AからZ              |
| [a-zA-Z]            | aからzまたはA-Z　　    　|
| ^                   | 文字の先頭           |
| $                   | 文字の末尾           |

※あくまで一部です

## Javaによる正規表現の使用方法
JAVAで正規表現を使用する方法は下記です。

1. Patternクラスのcompileメソッドの引数に正規表現パターンを指定し、  
   指定された正規表現をコンパイルし保持したPatternオブジェクトを生成
2. 生成したPatternオブジェクトのmacherメソッドに検索対象の文字列を指定し、  
   一致したかどうかなどの情報を取得できるMatcherオブジェクトを取得
3. 取得したMatcherオブジェクトに用意されているメソッドを使用し、  
   検索対象文字列が指定した正規表現に一致するか確認したり、  
   一致した文字列を別の文字列に置換したりする

```java
    // 判定対象文字列
    String targetStr = "12345";

    // パターンを生成
    Pattern p = Pattern.compile("^123");

    // 判定対象文字列に対して、パターンを適用
    Matcher m = p.matcher(targetStr);

    // 一致したが判定結果を確認
    System.out.println(m.matches()); // trueが表示される
```

* リファレンス
    * [java.util.regex.Pattern](https://docs.oracle.com/javase/jp/8/docs/api/java/util/regex/Pattern.html)
    * [java.util.regex.Matcher](https://docs.oracle.com/javase/jp/8/docs/api/java/util/regex/Matcher.html)

## 正規表現パターンの使用例
例：下記のような入力項目から入力された電話番号が、正しい電話番号体系であるかどうかを判定する

![Sample001](./sample_tel.png "Sample001")

上記のような処理を正規表現を使用しチェックを実施する場合、  
まずはじめに**正しい電話番号体系**とは何かを調べましょう。  

[このページ](http://www.soumu.go.jp/main_sosiki/joho_tsusin/top/tel_number/q_and_a.html)を見ると
電話番号の体系は以下のパターンになることが分かります。  
___半角数字が2から5個,ハイフン,半角数字が1から4個,ハイフン,半角数字が4個___ 

この*パターンを見つける*という事が正規表現を使う上で大切な事になります。　　

では、このパターンに沿って正規表現を作成していきましょう。  

まず特定したパターンを見てみると、
下記の文字に分割することができます。　　

* 半角数字
* n個
* nからm個
* ハイフン

このうち**半角数字**,**n個**,**nからm個**は正規表現パターンでは、  
 **\d**,**{n}**,**{n,m}**で表現できます。
 なので、パターンの中の

 * 半角数字が2から5個
 * 半角数字が1から4個
 * 半角数字が4個

 を正規表現パターンで表現すると下記になります。

 * \d{2,5}
 * \d{1,4}
 * \d{4}

ハイフンと一致するかどうかは"[-]"で表現できます。

これらを組み合わせ特定したパターンを正規表現パターンで表現すると、


* 特定したパターン
    * 半角数字が2から5個,ハイフン,半角数字が1から4個,ハイフン,半角数字が4個

* 正規表現パターンで表現
    * \d{2,5}[-]\d{1,4}[-]\d{4}

この正規表現パターンを使用し、
例題をJavaソースで実装すると下記になります。

```java
  /**
   * 判定対象文字列が電話番号体系を満たす
   */
  public static void regularExpression001() {
    // 判定対象文字列
    String targetStr001 = "11-1-1111";

    // パターンを生成
    Pattern p001 = Pattern.compile("\\d{2,5}[-]\\d{1,4}[-]\\d{4}");

    // 判定対象文字列に対して、パターンを適用
    Matcher m001 = p001.matcher(targetStr001);

    // 結果判定
    System.out.println(m001.matches());// trueが表示される

  }

  /**
   * 判定対象文字列が電話番号体系を満たさない(桁数越え)
   */
  public static void regularExpression002() {
    // 判定対象文字列
    String targetStr002 = "111111-11111-11111";

    // パターンを生成
    Pattern p002 = Pattern.compile("\\d{2,5}[-]\\d{1,4}[-]\\d{4}");

    // 判定対象文字列に対して、パターンを適用
    Matcher m002 = p002.matcher(targetStr002);

    // 結果判定
    System.out.println(m002.matches());// falseが表示される

  }

  /**
   * 判定対象文字列が電話番号体系を満たさない(半角英字が含まれる)
   */
  public static void regularExpression003() {
    // 判定対象文字列
    String targetStr003 = "11-11a1-1111";

    // パターンを生成
    Pattern p003 = Pattern.compile("\\d{2,5}[-]\\d{1,4}[-]\\d{4}");

    // 判定対象文字列に対して、パターンを適用
    Matcher m003 = p003.matcher(targetStr003);

    // 結果判定
    System.out.println(m003.matches());// falseが表示される

  }
```

※ 実行環境がない場合は、
[こちら](http://java-regex-tester.appspot.com/)でも正規表現のパターンが正しいか確認することができます。

# 次回
今回は正規表現の使い方などをざーっと説明しましたので、  
今ひとつ理解ができていないと思います。  
次回は正規表現の基本用語、各正規表現パターンの使い方を説明します。