# 正規表現 入門 その3
今回は前回説明した代表的なメタキャラクターを組み合わせて使う方法と  
正規表現に用意されているその他の機能について説明します。

## 正規表現パターン

まずはおさらいも兼ねて前回までに登場した正規表現パターンを  

| パターン               | 意味              |
|:--------------------|:------------------|
| .                   | 任意の文字          | 
| ?                   | 0または1回発生        |
| *                   | 0回以上発生          |
| +                   | 1回以上発生         |
| {n}                 | n回発生            |
| {n,}                | n回以上発生         |
| {n,m}               | nからm回発生　　　    　|
| \d | 半角数字([0-9]) |
| [0-9]               | 半角数字               |
| \D | 半角数字以外すべて |
| [a]                 | aに一致
| [abc]               | a,b,cのいずれか      |
| [^abc]              | a,b,c以外の文字    |
| [a-z]               | aからz              |
| [A-Z]               | AからZ              |
| [a-zA-Z]            | aからzまたはA-Z　　    　|
| &#124;                   | OR条件<br> [apple&#124;banana]と記載すると<br>"apple"か"banana"のどちらかに一致　|
| ^                   | 文字の先頭           |
| $                   | 文字の末尾           |
| \w | すべての半角英数字とアンダースコア([a-zA-Z0-9_]) |
| \W | 半角英数字とアンダースコア以外すべて |
| \s | 空白文字(半角スペース、タブ文字、改行、改ページ) |
| \S | 空白文字以外 |
| \n | 改行 |
| \f | 改ページ |
| \t | タブ |
| \b | 単語の境界 | 
| (●●●) | 開き括弧内で指定した文字と一致するか | 

## メタキャラクターを組み合わせる
複数のメタキャラクターを組み合わせて使う場合は、
どの部分にどのメタキャラクターを使うかを考えていくことが大事です。

例えば

* Feb 30 2025
* Jun 15 2011
* 1989 11 02

とあった場合、"MMM DD YYYY"形式の日付に一致する正規表現を書くとした場合、

1. ”MMM"は数字以外の3文字なので、"\D\D\D"となります。
2. "DD"と"YYYY"は半角数字なので、"\d\d"と"\d\d\d\d"となります。
3. 月と日、日と年の間は半角スペースなので"\s"となります。
4. 1～3を組み合わせると、"\D\D\D\s\d\d\s\d\d\d\d"となります。
   または"\D{3}\s\d{2}\s\d{4}"となります。

このようにパターンを見つけ、分解し考えることが大事になります。

メタキャラクターを組み合わせて使うテストケースMixMetaCharTest.javaを  
前回ダウンロードしたRegularExpression内に用意しているので解いてみてください。

## 最長マッチと最短マッチ
> 下記文から**"晴れ"**と**"くもり"**にマッチする正規表現を書いてください。  
> 明日は"晴れ"または"くもり"です。

それぞれの文字はダブルクォートで囲まれた文字となります。  
なので前回までの内容を踏まえると、「\".*\"」が思いつきますが、  
これは下記に一致する正規表現となります。

* <Font color="red">"</Font>晴れ"または"くもり<Font color="red">"</Font>

"\*"は一番広い範囲でマッチしようとする性質があるためです。  
これを**最長マッチ**と呼びます。  
なので、単純に".\*"と記載すると一番最初に出現したダブルクォートと  
一番最後に出現したダブルクォートの間がマッチ対象となります

この性質を抑制した量指定があり、それは**\*?**となります。  
これは一番狭い範囲でマッチしようとする性質があります。  
この性質を**最短マッチ**と呼びます。

ですので、**\".\*?\"**と記載すれば、
一番最初に出現したダブルクォートと  
次に出現したダブルクォートの間がマッチ対象となり、  
上記例だと**"晴れ"**と**"くもり"**がマッチ対象となります。  

その他の量指定も最長マッチの性質を持っており、  
それぞれの量指定子にも、最短マッチ用の量指定子があります。


| 最長マッチ             | 最短マッチ           |
|:--------------------|:------------------|
| * | *? |
| + | +? |
| ? | ?? |
| {n} | {n}? |
| {n,} | {n,}? |
| {n,m} | {n,m}? | 

## キャプチャ
> ""の間が同じである場合のみマッチする正規表現を書いてください。  
> 明日は"●●●"で、明後日も"●●●"です。

このように対象文字が前の文字列とマッチするかは、  
**キャプチャ**と呼ばれ、「(」,「)」を利用します。  

例えば、(\\D)\d+\\1と書いた場合は、  
下記に一致します。

* abc1234bc
* xyz098xyz

「()」で指定した文字と「\\1」で指定した文字列は同じでないといけません。  
なので、上記例であると"abc123xyz"はマッチしません。 

また、複数の文字列をキャプチャをしたい場合は、  
"\\1","\\2"と番号を使うことで複数のキャプチャを利用することができます。  
番号はキャプチャ用の"()"の順番によって決まります。

例えば、"**(.*?)\\.(.*?)のファイル名は「\\1」、拡張子は「\\2」**"という正規表現を書いた場合、  
はじめの".\*?"は"\\1"とマッチし、次の".\*?"は"\\2"にマッチします。  
なので、この正規表現は下記に一致します。

* test.htmlのファイル名は「test」、拡張子は「html」
* bug.logのファイル名は「bug」、拡張子は「log」

「()」は正規表現では、**グループ化**と**キャプチャ**の2つの意味を持っています。  
キャプチャしないグループ化は、**(?:●●●)**と記載します。

例えば、<(\\w+)\>(?:\\sid="\\w*)"\><(\\w+)\>google</\\2\></\\1)\>と記載すると  
下記にマッチします.

* <p id="hoge"\><a\>google</a\></p\>
* <p id=""\><a\>google</a\></p\>
* <p \><a\>google</a\></p\>

## 演習問題
最短マッチとキャプチャに関する問題を  
ConvenienceFeature.javaに用意したので解いてみてください。

## 次回
次回は残りの機能と実践的な内容の正規表現を作っていきます。