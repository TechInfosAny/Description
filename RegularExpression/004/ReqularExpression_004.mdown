# 正規表現 入門 その4
今回は前回説明できなかった残りの機能と実践的な正規表現を例に  
それぞれの正規表現がどのような意味を持っているか説明します。

## 前回までに出てきた正規表現パターン

| パターン               | 意味              |
|:--------------------|:------------------|
| .                   | 任意の文字          | 
| ?                   | 0または1回発生        |
| *                   | 0回以上発生          |
| +                   | 1回以上発生         |
| {n}                 | n回発生            |
| {n,}                | n回以上発生         |
| {n,m}               | nからm回発生　　　    　|
| \d | 半角数字([0-9]) |
| [0-9]               | 半角数字               |
| \D | 半角数字以外すべて |
| [a]                 | aに一致
| [abc]               | a,b,cのいずれか      |
| [^abc]              | a,b,c以外の文字    |
| [a-z]               | aからz              |
| [A-Z]               | AからZ              |
| [a-zA-Z]            | aからzまたはA-Z　　    　|
| &#124;                   | OR条件<br> [apple&#124;banana]と記載すると<br>"apple"か"banana"のどちらかに一致　|
| ^                   | 文字の先頭           |
| $                   | 文字の末尾           |
| \w | すべての半角英数字とアンダースコア([a-zA-Z0-9_]) |
| \W | 半角英数字とアンダースコア以外すべて |
| \s | 空白文字(半角スペース、タブ文字、改行、改ページ) |
| \S | 空白文字以外 |
| \n | 改行 |
| \f | 改ページ |
| \t | タブ |
| \b | 単語の境界 |

| 最長マッチ             | 最短マッチ           |
|:--------------------|:------------------|
| * | *? |
| + | +? |
| ? | ?? |
| {n} | {n}? |
| {n,} | {n,}? |
| {n,m} | {n,m}? | 

## 先読み/否定先読み/後読み/否定後読み
### 先読み/否定先読み

> 以下の例文で、後ろに”年”が続く１桁以上の数字にのみマッチする正規表現パターンを書いてください
> 太郎は昭和58年生まれで32歳です。次郎は昭和60年生まれで30歳です。

この例に一致する文字は"58年"と"60年"の二つがあります。  
単純に"●●年"に一致する正規表現は"\d+年"となりますが、  
これだと”58年”と”60年”の２つにヒットしてしまい、    
今回は”後ろに”年”が続く１桁以上の**数字にのみ**マッチ”しないといけないため、  
意図した文字にマッチしていません。

「指定された条件の前にある文字列」にマッチさせたい場合は、  
**先読み**と呼ばれる機能を使用します。
記載方法は下記になります。

* (?=●●)

”●●"の箇所には条件となる正規表現を指定します。  
例えば”hoge(?=fuga)"と記載した場合は、  
”fuga"という文字列の前にある”hoge"に一致する正規表現となります。  

今回は「後ろに"年"が続く１桁以上の数字であるため」、
例題の正規表現は”\d+(?=年)"となります。

また、「指定された条件**以外**の前にある文字列」にマッチさせたい場合は、  
**否定先読み**と呼ばれる機能を使用します。  
記載方法は下記になります。  

* (?!●●)


例文が”後ろに「”年”と”数字”**以外**が続く１桁以上の数字にのみマッチする正規表現パターン」となっていた場合は、  
”\d+(?![年\d])”となります。

これを"\d+[^年\d]"と記載すると、  
"32歳"、"30歳"の二つにマッチしていまい、  
数字のみではなくなります。

### 後読み/否定後読み
> 以下の例文で、「昭和」または「平成」に続く1桁以上の数字にのみマッチする正規表現パターン
> 西暦2016年は平成28年です。西暦1985年は昭和60年です。

”指定された条件に続く文字列”にマッチさせたい場合は、  
”後読み”と呼ばれる機能を使用します。  
記載方法は下記になります。  

* (?<=●●)

”●●”の箇所には条件となる正規表現を指定します。  
今回の場合は「”昭和”または”平成”に続く1桁以上の数字にのみ”であるため、  
"(?<=昭和|平成)\d+"となります。

また、否定先読みと同様に否定後読みと呼ばれる機能があります。  
こちらの記載方法は下記になります。

* (?<!●●)

## 実践的な正規表現
前回までで、基本的な正規表現パターンの書き方を説明したが、  
今回はそれらを組み合わせてより実践的な正規表現パターンを作っていきます。  

複雑な正規表現パターンとなるため、  
正規表現に慣れるまでは難しく感じるかもしれませんが、  
マッチさせたい対象文字列をよく考え整理し、  
正規表現が作りやすい形として理解し直すことが、  
正規表現を理解する大事なポイントとなります。  

### 指定された範囲の整数にマッチする正規表現

* お題  
    * 0から100までの範囲の整数にマッチする正規表現

* 条件
    * 先頭にゼロがあるものは対象としない
    * +または-の符号は考慮しない

* 対象データ  
    * 1  
    * 12  
    * 123  
    * 1234  
    * 0  
    * 00  
    * 000  
    * 99  
    * 100  
    * +98  
    * -1  
    * -76  

単純に3桁の数字を表す正規表現パターンは"\d{3}"と書きますが、  
これでは101以上の数字にも先頭にゼロがつく数字にもマッチしてしまいます。  

このお題は下記の3つパターンで考えればわかりやすいです。
* 0の場合
* 100の場合
* それ以外の場合

ます"0の場合"と"100の場合"の正規表現はそれぞれ「0」、「100」となります。  
それ以外は"1から99"の場合を表しており、＋の位は条件より"0"になることはありません。  
ですので、正規表現は"[1-9]\d?"となります。

よってお題の正規表現は"0|[1-9]\d?|100"となります。

### 郵便番号にマッチする正規表現
* お題  
    * 郵便番号を表す文字列にマッチする正規表現

* 条件
    * 郵便番号は3桁の数字と4桁の数字をハイフンで連結した7桁の番号
    * ハイフンは省略可能

* 対象データ  
    * 123-4567
    * 1234567
    * 12-4567
    * 987-9543
    * 8742-2982
    * 426-13563
    * 2456-1345
    * 98764932  

 これは比較的簡単だと思います。  
3桁の数字と4桁の数字はそれぞれ"\d{3}","\d{4}"と書けます。  
またハイフンは省略可能であるため、"-?"となります。  
なので、お題の正規表現は"\d{3}-?\d{4}"となります。

### 日付にマッチする正規表現
* お題  
    * 「YYYY/MM/DD」形式の日付表記にマッチする正規表現

* 条件
    * 西暦1000年代と2000年代を対象
    * 日付は月にかかわらず31日まで  
    * 月、日が1桁の場合、前に0がついてもよい

* 対象データ  
    * 2010/10/03
    * 1979/10/13
    * 2008/02/21
    * 2001/12/03
    * 2012/1/2
    * 2100/3/21
    * 1829/5/15
    * 1999/13/21
    * 2031/02/25
    * 894/01/01

まず西暦、月、日をそれぞれ分けて考えていきます。    

西暦は1000年代と2000年代なので上1桁は"1"または"2"になり、  
それ以外は任意の数字ですので、"[12]\d{3}"となります。

次に月ですが、"1"から"12"までが対象なので、1桁の場合と上1桁が１である2桁の場合を考えればよいです。  
1桁の場合は前に0がついてもよいため、"0?[1-9]"となります。  
2桁の場合は1の位は"0","1","2"のいずれかのため、"1[0-2]"となります。   
これらを組み合わせて月は"0?[1-9]|1[0-2]"となります。  

最後に日ですが、"1"から"31"が対象であるため、これらをパターン分けして考えていきます。  
まず"1"から"9"は前に0がついてもよいため、"0?[1-9]"となります。  
次に"10"から"29"は"[12][0-9]"となります。  
最後に"30"と"31"は"3[01]"となります。  
これらを組み合わせると"0?[1-9]|[12][0-9]|3[01]"となります。  

お題の正規表現は、西暦、月、日の正規表現と日付の区切り文字は"/"と組み合わせると下記になります。  
"[12]\d{3}/(?:0?[1-9]|1[0-2])/(?:0?[1-9]|[12][0-9]|3[01])"

### 2回連続で出現する英単語にマッチする正規表現
* お題  
    * 同じ英単語が2回連続で出現する部分にマッチする正規表現

* 対象データ  
    * This is is a pen
    * This This is a pen pen pen

英単語を表す正規表現は"\w+"となります。  
「同じ英単語が2回連続で現れること」を調べるには、1つ目にマッチした英単語をキャプチャし、  
空白を挟んで次の英単語がそのキャプチャしたものと同じであるかチェックしればよいです。  
その正規表現は"(\w+)\s+\1"となります。  
ただこれだと「some something」にもマッチしてしまいますので、  
そこで前後に単語境界を表す「\b」を追加し、"\b(\w+)\s+\1\b"となります。

### URLのファイル名にマッチする正規表現
* お題  
    * URL形式の文字列から、ファイル名の部分にのみマッチする正規表現

* 条件
    * ファイル名は1文字以上
    * ファイル名に使われる文字は英大文字、英小文字、数字、「-_.」のみ

* 対象データ  
    * http://www.example.jp/sample.html
    * http://www.example.jp/wigh_fragment.html#flag
    * http://www.example.jp/sample.png
    * http://www.example.jp/
    * http://www.example.jp:8080/with_port.html
    * http://www.example.jp/with_param.html?param1=value1
    * http://www.example.jp/with_param2.html?param1=value1&param2=value2
    * http://www.example.jp/with_param3.html?param4=value4&param5=value5
    * http://www.example.jp/with_param4.html?=value6

ファイル名は対象文字列の最後の"/"に続く文字列がファイル名になります。  
したがって最後の"/"の位置が分かれば、そこから続く文字の繰り返しがマッチ対象となります。  
最後の"/"に続く文字列ということは、「直前にスラッシュがあり、かつ後ろにスラッシュが存在しない文字列」となります。  
これは先読みと後読みの機能を使うことで特定することができます。  
直前に"/"がある位置は後読みを使って、"(?<=/)"と表現することができます。  
一方で後ろに"/"が存在しない位置は、否定先読みを使って"(?!.*/)"と表現することができます。  
".*/"の意味は"/"までの任意の文字列にマッチする正規表現です。  
これにマッチする文字列がないということは、それ以降に"/"が存在しないことになります。  
よってファイル名をよく特定する正規表現は"(?<=/)(>!.*/)"となります。  

これでファイル名を探すことができました。  
ファイル名は"英大文字"、"英小文字"、"数字"、"「-_.」のみ"であるため、  
これらを表現する正規表現は"[a-zA-Z0-9\\-\_\\.]+"になります。  
よって、お題の正規表現は"(?<=/)(>!.*/)[a-zA-Z0-9\\-\_\\.]+"となります。

対象データにクエリ情報が付与されているデータがありますが、  
クエリ情報は必ず"?"から始まるため、"[a-zA-Z0-9\\-\_\\.]+"の正規表現では"?"はマッチしないため、  
クエリ情報がファイル名としてマッチすることはなく、ファイル名だけを取得できます。

### メールアドレスにマッチする正規表現
* お題  
    * メールアドレス形式の文字列にマッチする正規表現

* 条件
    * 「ユーザ名@ホスト名.ドメイン」の形式
    * ユーザ名に使える文字は英大文字、英小文字、数字、「_-.」のみ
    * ホスト名に使える文字は英大文字、英小文字、数字、「-.」のみ
    * ドメインに使える文字は英大文字、英小文字のみ

* 対象データ  
    * taro@sample.jp
    * jiro@sample.co.jp
    * taro-jiro@example.co.jp
    * I_Like_Tokyo@example.jp

まずユーザ名から考えます。  
ユーザ名には英大文字、英小文字、数字、「_-.」が使えるので、  
"[\w\\-\\.]+"となります。  

次にホスト名ですが、ドメイン以外の部分は英大文字、英小文字、数字、「-.」が使えるので、  
"[a-zA-Z0-9\\-\\.]+"となります。  

ドメインは英大文字と英小文字が使えるため、  
"\\.[a-zA-Z]+"となります。  

これらを組み合わせるとお題の正規表現は、  
"[\w\\-\\.]+@[a-zA-Z0-9\\-\\.]+\\.[a-zA-Z]+"となります。

## 最後に
PracticeProblemTest.javaにより実践的な問題演習がありますので、やってみてください。