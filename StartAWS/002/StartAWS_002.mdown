# AWSで始めるWEBアプリ構築 その2
今回はAmazon S3とAmazon EC2を使って、  
WEBサイトを構築します。

* WEBサイト  
     * サーバ上のHTMLファイルや画像をそのままブラウザに表示
* WEBアプリ
     * サーバ上で何かしらの処理をし、その処理結果をブラウザに表示     

## WEBアプリとは
Webアプリとは、インターネットなどのネットワークを介してWebブラウザを使って操作するアプリの事です。  
一方端末にインストールして実行するアプリをネイティブアプリといいます。  

## Amazon S3を使ったWEBサイトの構築
まずは最も簡単にWEBサイトが構築できるAmazon S3(Amazon Simple Storage Serevice)を使って、  
WEBコンテンツをインターネット上に公開する手順を説明します。

#### Amazon S3とは
クラウド上にストレージを提供するサービスです。  
ファイルサーバのようなものと考えてください。  
クラウド上でファイルを共有できるサービスなので、インターネットに接続できる環境であれば、  
どこからでもデータにアクセスできます。  
最大99.99%の耐久性と99.99%の可用性を持ちます。

S3はデータの保管量に加えて、データの転送やリクエスト数によってお料金が変わりますが、  
月額使用料や初期費用は不要です。

無料枠では下記を1年間利用できます。

| 種類| 制限 |
|:-----------|:------------|
| 標準ストレージ | 5GB |
| Getリクエスト | 20,000リクエスト |
| Putリクエスト | 2,000リクエスト |
| データ転送 | 25GB |

#### 基本用語

* バケット
    * データの入れ物
* オブジェクト
    * 格納するファイルの呼び方

S3を利用するときは、データの入れ物であるバケットを作成します。  
そのバケットの中にHTMLファイルや画像ファイルなどを格納します。  
その後、バケットにアクセス権を設定し、データを公開します。

### Amazon S3を使ったWEBサイト構築手順
#### バケットの作成
* AWSマネージメントコンソールを表示し、[S3]を選択
![001](./img/001.jpeg "001")   

* [バケットの作成]ボタンをクリックして、新規のバケットを作成
![002](./img/002.jpeg "002")   

* 名前を入力し、リージョンは[Tokyo]を選択した後、[作成]ボタンを押下します  
※バケット名は英小文字で他と重複しない一意の名前
![003](./img/003.jpeg "003")

* バケットが完成するとこのように表示されます
![004](./img/004.jpeg "004")

#### オブジェクトのアップロード
今回は下記のオブジェクトを用意しアップロード  
　　  sample_amazonS3  
　　  　　| 
       -html  
　　  　　  　|  
　　  　　  　|-index.html  
　　  　　  　|-error.html  

* 作成したバケット名をクリック
![005](./img/005.jpeg "005")

* [アップロード]ボタンをクリック
![006](./img/006.jpeg "006")

* アップロードダイアログが表示されたら、[ファイルを追加する]ボタンを押下するか、  
  ドラッグ&ドロップでアップロードしたいファイルを追加  
![007](./img/007.jpeg "007")

* 用意したオブジェクトを配置し、[アップロードの開始]ボタンを押下
![008](./img/008.jpeg "008")

* アップロードが完了するとこのように表示されます
![009](./img/009.jpeg "009")

#### Webコンテンツの一般公開
[プロパティ]ボタンを押下し、アップロードしたファイルを選択すると、  
右側にそのファイルのリンクURLが表示されますが、  
こちらにアクセスしてもアクセスエラーになります。
![010](./img/010.jpeg "010")

これはS3のバケットはインターネット上に公開されてもアクセス権がないので表示できません。  

アップロードしたファイルを公開するのは、  
対象ファイルを右クリックし、[公開する]ボタンをクリックする必要があります。
![011](./img/011.jpeg "011")

これで先ほどのリンクURLにアクセスするとエラーとならず、  
アップロードしたファイル内容を表示することができます。
![012](./img/012.jpeg "012")

#### Webサーバ機能の設定
ドメイン名だけでアクセスさせるためにのWebサーバ機能を有効にします。

*[プロパティ]の[静的ウェブサイトホスティング]内にある[ウェブサイトのホスティングを有効にする]を選択
![013](./img/013.jpeg "013")

* 下記を入力し、[保存]ボタンをクリック
    * インデックスドキュメント：index.html  
    　　アクセスしたときに最初に表示する画面  
    * エラードキュメント：error.html  
    　　ファイルが見つからないなど、なんらかのエラーが発生した時に表示する画面
![014](./img/014.jpeg "014")

これでエンドポイントにアクセスした場合は、index.htmlのファイルが表示され、  
Webサーバ上に存在しないファイルにアクセスした場合はerror.htmlのファイルが表示されます。
![015](./img/015.jpeg "015")

## Amazon EC2を使ったWebサーバー構築
Amazon S3でも簡単にWebサイトを構築できますが、その代わり詳細な設定ができません。  
そこで仮想サーバ機能を提供するAmazon　EC2を使って、  
LinuxサーバにApache HTTP ServerをインストールしてWebサーバを構築する手順を説明します。 

#### Amazon EC2とは
Amazon Elastic compute Cloud(Amazon EC2)とは、仮想サーバ機能を提供するクラウドサービスで、  
Amazon Web Servicesのデータセンター内に設置された物理サーバーを仮想化技術を使って、  
サービス利用者え共有できるようにしたサービスです。  
EC2はインスタンスのスペックと稼働した時間に応じて課金されます。  

EC2の大きな特徴であるオートスケール機能を利用することで、  
要件の変化にあわせてインスタンスの処理能力を自由に拡張または縮小できます。  

オートスケール機能はクラウドシステムの最大の利点の一つとなる機能です。  
システム構築のサイ、アプリの負荷を事前に見積もって、必要なサーバやネットワークの帯域を確保しないといけません。  
これをサイジングといいます。サーバーのリソースが不足しているとシステムダウンの原因となり、  
逆に過剰なリソースは無駄な投資となってしまいます。  
しかし、オートスケール機能により、トラフィックの増減に応じてリソースを増減できるのでサイジングが不要になります。  

#### 基本用語

* インスタンス
    * 1台のサーバー
* EBS(Amazon Elastic Block Store)
    * サーバーのハードディスクに相当する仮想ディスク
* AMI(Amazon Machine Image)
    * サーバーのインストールするOSや各種ミドルウェアやアプリのイメージ

AMIには、インスタンスを起動するために必要なOS/アプリケーションサーバー/アプリが含まれます。  
インスタンスからAMIを作成することもできますし、AMIをもとに新しいインスタンスを生成することもできます。  
同様の構成のインスタンスを複製作成したいときは、このAMIを使います。

### Amazon EC2を使ったWebアプリ構築

#### EC2インスタンスの起動
* AWSマネージメントコンソールから[EC2]を選択
![016](./img/016.jpeg "016")

* [インスタンスの作成]ボタンをクリック
![017](./img/017.jpeg "017")

#### Amzonマシンイメージ(AMI)の決定
Amazonマシンイメージ(AMI)の選択画面では、仮想サーバのOSを選択します。  
無料枠では下記が選択でき、このOSイメージのことをAMIと呼びます。

* Amazon Linux AMI 
* Red Hat Enterprise
* SUSE Linux
* Ubuntu
* Windows Server

今回はEC用LinuxイメージであるAmazon　Linux AMIを選択します。  
これはEC2上で実行するアプリのために多数のAWS APIツールがインストール済みであり、  
Amazon Linux AMIで実行されるすべてのインスタンスに対し、  
セキュリティとメンテナンスアップデートを継続的に提供します。  
また、Amazon Linux AMIでは追加のパッケージはyumコマンドを使って、  
パッケージリポジトリを介して自由に追加できます。

* "Amazon Linux AMI 2016.03.2 (HVM), SSD Volume Type"の[選択]ボタンを押下
![018](./img/018.jpeg "018")

#### インスタンスタイプの選択
ここでは仮想サーバのスペックを選択します。   
EC2では下記のインスタンスタイプが用意されています。  
CPU速度やメモリ容量、ネットワーク性能などによって料金が異なります。  

* 汎用  
    CPUを常にフルパワーで使用しないサーバーに適したインスタンス  
    開発環境などのトラフィックの低いWebアプリケーションサーバなどに適しています　　

* コンピューティング最適化  
    EC2の中で最も高い性能を誇るプロセッサーを持つインスタンス  
    フロントエンドサーバー、Webサーバ、などの高パフォーマンスのサーバに適しています  

* メモリ最適化  
    メモリを大量に消費するアプリ用のインスタンス  
    高パフォーマンスが必要なデータベースや企業アプリの大規模なデプロイ用サーバに適しています

* GPUインスタンス  
    グラフィックと汎用的なGPUコンピューティングアプリ向けのインスタンス  
    3Dアプリ、ストリーミングなどにサーバに適しています  

* ストレージの最適化  
    高速ランダムI/Oパフォーマンス用のインスタンス  
    トランザクションデータベース、クラスターファイルシステムなどのサーバに適しています  

無料枠では汎用の"t2.micro"が対象となっているので、今回はこちらを選択します。 

* "t2.micro"を選択し[インスタンスの詳細の設定]ボタンを押下
![019](./img/019.jpeg "019")

#### インスタンスの詳細の設定
ここではインスタンスの数やネットワーク構成などを設定します。  
設定できる項目は下記になります。

|  項目 | 説明 |
|:------|:-----|
|インスタンスの数 |　作成するインスタンスの数 |
| 購入のオプション |　スポットインスタンスとしての購入 |
| ネットワーク |　Amazon Virtual Private Cloud(VPC)の作成と独自のIPアドレス範囲の選択など |
| サブネット |　VPCのIPアドレスのサブネットマスク |
| 自動割り当てパブリックIP |　インターネットからアクセスできるようにするかどうか |
| IAMロール |　IAMによる権限設定 |
| シャットダウン動作 |　OSシャットダウンが実行されたときのインスタンスの動作を設定 |
| 削除保護の有効化 |　インスタンスを誤って削除しないように保護するかどうか |
| モニタリング |　Amazon CloudWatchを使ってインスタンスの稼働監視をする |
| テナンシー |　インスタンスをシグナルテナントの専用ハードウェアで実行するかどうか |
| ユーザーデータ |　インスタンスを設定するユーザデータまたは設定スクリプトを実行するユーザデータを指定 |

今回はデフォルトのままとします。

* デフォルト値のまま[次の手順：ストレージの追加]ボタンをクリック
![020](./img/020.jpeg "020")

#### ストレージの追加
EC2のハードディスクに相当するEBSのサイズを決定します。  
今回はデフォルトのままとします。

* デフォルト値のまま[インスタンスのタグ付け]ボタンをクリック
![021](./img/021.jpeg "021")

#### インスタンスのタグ付け
EC2のサーバーを管理しやすいようにわかりやすいタグをつけます。

* [Name]タグの値に「WebServer001」を設定し、[セキュリティグループの設定]ボタンをクリック
![022](./img/022.jpeg "022")

####　セキュリティグループの設定
ここではセキュリティグループの設定をします。  
セキュリティグループとはEC2インスタンスにアクセスできるポート番号やアドレスを設定できる  
ファイアーウォール機能の事です。

* 下記の設定をし[確認と作成]ボタンをクリック

| 項目 | 設定値 | 
|:-----|:-------|
| セキュリティグループの割り当て | 新しいセキュリティグループを選択する | 
| セキュリティグループ名 | WebServer001 |
| 説明 | WebSer001 Group |

許可するポート

| タイプ | プロトコル | ポート範囲 | 送信元 |  
|:-----|:-------|:-----|:-------|
| SSH | TCP | 22 |　任意の場所/0.0.0.0/0 |
| HTTP | TCP | 80 |　任意の場所/0.0.0.0/0 

![023](./img/023.jpeg "023")

#### 動作確認

* 設定値を確認し[作成]ボタンを押下
![024](./img/024.jpeg "024")

* アクセスキーを選択するダイアログで、[新しいキーペアの作成]を選択し、  
キーペア名に[WebServer001Keypair]と入力し、[キーペアのダウンロード]ボタンを押下
![025](./img/025.jpeg "025")

ここで生成したキーは、EC2サーバにアクセスする際に必要になります。  
AWSではEC2にアクセスする時は公開鍵暗号化方式を使って認証します。  
ダウンロードした秘密鍵はなくさないようにしてください。  
EC2に2回目以降にアクセスするときは、今回作成した公開鍵/秘密鍵のペアを使います。

* ダウンロードが終わったら[インスタンスの作成]ボタンをクリック
![026](./img/026.jpeg "026")

* 下記でインスタンスの作成が完了
![027](./img/027.jpeg "027")

#### EC２2インスタンスの状態確認
AWSマネージメントコンソールとりEC2よりインスタンスの状態が確認できます。
![028](./img/028.jpeg "028")

またインスタンス負荷は[モニタリング]より確認できます。
![029](./img/029.jpeg "029")

#### Webサーバのインストール
EC2インスタンスにリモートアクセスしてWebサーバをインストールします。  
今回はターミナルソフトとして[RLogin](http://nanno.dip.jp/softlib/man/rlogin/)を使います。

* RLoginを起動し[新規]ボタンを押下し下記を入力し

| 項目 | 設定値 | 
|:-----|:-------|
| エントリー/コメント | 任意 | 
| Server　Address | Amazon EC2のパブリック IP |
| Socket Port | 22 |
| User Name | ec2-user |
| SSH Identity Key | インスタンス生成時に生成したキー |

![030](./img/030.jpeg "030")
![031](./img/031.jpeg "031")

Apache HTTP Serverをインストールするため、  
パッケージ管理システムのyumを使用します。

* [sudo yum -y update]を入力し、yumのアップデート

* [sudo yum install -y httpd]を入力し、Apache HTTP Serverをインストール

* [sudo service httpd start]を入力し、httpdを起動
![032](./img/032.jpeg "032")

* EC2インスタントのパブリックIDまたはパブリックDNSにアクセスし、  
Apache HTTP Serverの規定画面が表示されることを確認
![033](./img/033.jpeg "033")

#### 自動起動の設定
serviceコマンドでhttpdを起動したときは、インスタンスを停止または再起動した時にhttpdも停止します。
そのためインスタンス起動時にhttpdを自動起動させるように設定します。

* [sudo chkconfig --list httpd]を入力し、自動起動するかどうかの設定を確認
![034](./img/034.jpeg "034")

* [sudo chkconig httpd on]を入力し、自動起動を設定

* [sudo chkconfig --list httpd]を再度入力し、自動起動するかどうかの設定を確認
![035](./img/035.jpeg "035")

* 自動起動を解除する場合は[sudo chkconfig httpd off]を入力

chkconfigコマンドを実行すると、サービス名の後ろのOSのランレベルごとの  
サービスのON/OFF状態が表示されます。  
ランレベルの意味は下記になります。

| ランレベル | 説明 |
|:--------|:-----|
| 0 | インスタンスの停止 |
| 1 | シングルユーザーモード |
| 2 | ネットワーク通信なしのマルチユーザモード |
| 3 | マルチユーザーモード(通常の起動状態) |
| 4 | 未使用 |
| 5 | グラフィカルユーザインターフェイスが起動する状態 |
| 6 | インスタンスの再起動 |

#### ファイルのアップロード

* RLoginより[ファイル]-[SFTPファイル転送]を選択

* /samaple_amazonEC2/index.htmlをEC2インスタンスのホームディレクトリの[/home/ec2-user/index.html]にアップロード
![036](./img/036.jpeg "036")

* [ls -lart]を入力し、ファイルがアップロードされていることを確認
![037](./img/037.jpeg "037")

* アップロードしたファイルをApache HTTP Serverの規定公開フォルダーに移動するため、
[sudo cp /home/ec-user/index.html /var/www/html/]を入力
![038](./img/038.jpeg "038")

* EC2インスタントのパブリックIDまたはパブリックDNSにアクセスし、  
Apache HTTP Serverの規定画面が表示されることを確認
![039](./img/039.jpeg "039")

## ELBを使った負荷分散
これまでAWSを使ってWEBサイトを構築する手順を説明しましたが、  
通常のWEBサイトであれば24時間365日稼働しないといけません。  
このシステムが継続して稼働できる能力を**可用性**といいます。  
可用性が高いシステムをつくるための代表的な技術要素に**冗長化**があります。  
システムの冗長化とは、予備の装置を準備して万が一障害が発生しても、  
システム全体を停止させないようにする技術要素のことです。  

ただし、予備系のサーバを利用せずに保有しておくだけでは無駄になります。  
そのため、システムの可用性の向上と処理速度向上を同時に行う技術として**負荷分散**があります。  
負荷分散はサーバの処理を複数の機器に割り振ることで特定の危機に負荷が集中するのを防ぎます。  

AWSが提供する負荷分散(ロードバランサー)機能であるELBを使い、  
Webサーバに障害が発生しても、システム全体が停止しない仕組みを構築する手順を説明します。

#### カスタムAMIによるEC2インスタンスの生成
同じ構成のWebサーバを並列に複数台稼働させて、  
負荷分散させる方法を**スケールアウト**といいます。  
AWSでは同じ構成のEC2インスタンスを複数生成する機能があります。  
OSも含めたEC2インスタンスのフルバックアップのことをカスタムAMIと呼び、  
それをもとに複数のECwインスタンスを起動できます。

#### カスタムAMIの作成

* AWSマネージメントコンソールでAMIを取得したいEC2インスタンスを停止します。

* 右クリックで[イメージ]-[イメージの作成]をクリック

## Elastic IPを使った独自ドメインでのサイト運用
Webサーバとして常時稼働しておくインスタンスは、固定IPアドレスを割り振る必要があります。  
ここからはEC2インスタンスに固定IPアドレスを割り当てる手順と、  
独自ドメイン名を設定する手順を説明します。

### Elastic IP(固定IPアドレス)の割り当て
EC2ではインスタントを起動するとインターネットから接続するときの接続先となる、  
パブリックIPアドレスとパブリックホスト名が割り当てられます。  
しかし、インスタンスを停止し再び起動するとインスタンスのアドレスは変更されてしまいます。  

そこでインスタンスにElastic IPを割り当てることで、  
常に固定のIPアドレスを利用できます。
これを利用することでAWSのアカウントに対して静的なUPあどれっすが付与されます。  

#### Elastic IPの設定

* AWSマネージメントコンソールから[EC2]を起動しEC2メニューの[Elastic IP]を選択します。
![040](./img/040.jpeg "040")

#### アドレスの割り当て

* [新しいアドレスの割り当て]ボタンをクリック
![041](./img/041.jpeg "041")

* ダイアログが表示されるので[関連付ける]ボタンをクリック
![042](./img/042.jpeg "042")

* これでElastic IPが割り当てられます
![043](./img/043.jpeg "043")

#### アドレスの関連付け

* 割り当てられたElastic IPにアドレスを紐づけるため、[アクション]-[アドレスの関連付け]を選択
![044](./img/044.jpeg "044")

* アドレスの関連付けダイアログでインスタンスに生成したEC2インスタンスを選択し[関連付ける]ボタンをクリック
![045](./img/045.jpeg "045")

* これでEC2インスタンスにElastic IPが割り当てられました。
![046](./img/046.jpeg "046")

* Elastic IPにアクセスしアクセスできることを確認
![047](./img/047.jpeg "047")

[お名前.com](http://www.onamae.com/campaign/trial3/)などで独自ドメインをもっている場合、  
Amazon Route 53のDNSサービスを使って、ドメインとElastic　IPを紐づけることができます。

## 次回
次回はELBを使った負荷分散とWebアプリの構築手順を説明します。